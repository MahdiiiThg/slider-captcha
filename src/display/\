import React, { useState, useEffect } from 'react';
import { ArrowIcon, SuccessIcon, FailureIcon } from './icons';

const imageDataUrl = (image) =>
  `data:image/png;base64,${Buffer.from(image).toString('base64')}`;

const Challenge = ({ text, captcha, onComplete }) => {
  const [solving, setSolving] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  const [validated, setValidated] = useState(undefined);
  const [origin, setOrigin] = useState({
    x: 0,
    y: 0,
  });
  const [trail, setTrail] = useState({
    x: [0],
    y: [0],
  });

  // Allows slider control to go to the end of the track without the puzzle piece falling off
  const scaleSliderPosition = (x) => 3 + 0.9 * x;

  const handleStart = (e) => {
    if (submitting) return; // Prevent double submissions
    setOrigin({
      x: e.clientX,
      y: e.clientY,
    });
    setSolving(true);
  };

  const handleMove = (e) => {
    if (!solving || submitting) return; // Only move once user has clicked and before starting verification
    const move = {
      x: e.clientX - origin.x,
      y: e.clientY - origin.y,
    };
    if (move.x > 225 || move.x < 0) return; // Don't update if outside bounds of captcha
    setTrail({
      x: trail.x.concat([move.x]),
      y: trail.y.concat([move.y]),
    });
  };

  const handleEnd = (e) => {
    if (!solving || submitting) return;
    setSubmitting(true);
    setValidated(onComplete(scaleSliderPosition(trail.x[trail.x.length - 1]), trail));
  };

  return (
    <div
      className="scaptcha-card-element"
      draggable="false"
      onMouseMove={handleMove}
      onTouchMove={handleMove}
      onTouchEnd={handleEnd}
      onMouseUp={handleEnd}
    >
      <div
        className="scaptcha-card-background scaptcha-card-element"
        style={{
          backgroundImage: `url('${imageDataUrl(captcha.background)}')`,
        }}
      />
      <div
        className="scaptcha-card-slider-puzzle scaptcha-card-element"
        style={{
          backgroundImage: `url('${imageDataUrl(captcha.slider)}')`,
          left: `${scaleSliderPosition(trail.x[trail.x.length - 1])}px`,
        }}
        onMouseDown={handleStart}
        onTouchStart={handleStart}
      />
      <div className="scaptcha-card-slider-container scaptcha-card-element">
        <div className="scaptcha-card-slider-track scaptcha-card-element" />
        <div
          className="scaptcha-card-slider-label scaptcha-card-element"
          style={{ opacity: solving ? 0 : 1 }}
        >
          <span>{text.challenge}</span>
        </div>
        <div
          className="scaptcha-card-slider-mask scaptcha-card-element"
          style={{ width: `${trail.x[trail.x.length - 1] + 30}px` }}
        />
        <div className="scaptcha-card-slider-container scaptcha-card-element" draggable="false" />
        <div
          className="scaptcha-card-slider-control scaptcha-card-element"
          style={{ left: `${trail.x[trail.x.length - 1]}px` }}
          onMouseDown={handleStart}
          onTouchStart={handleStart}
        >
          {validated === undefined && (
            <ArrowIcon />
          )}
          {validated === true && (
            <SuccessIcon />
          )}
          {validated === false && (
            <FailureIcon />
          )}
        </div>
      </div>
    </div>
  );
};

export default Challenge;
